{"info": {"_postman_id": "b5cb68d1-c5fc-4676-8e1a-5bfa9fb545ad", "name": "Node E2E Tests - Room", "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json", "updatedAt": "2023-11-16T09:24:55.000Z", "uid": "30686839-b5cb68d1-c5fc-4676-8e1a-5bfa9fb545ad"}, "item": [{"name": "[Pre] Create Building BRoom", "event": [{"listen": "test", "script": {"id": "7dfe080a-d754-4c8b-afd5-a15b02d298a8", "exec": ["// Change this test if doesn't work for your test case\r", "pm.test(\"Creation is successful or already exists\", function () {\r", "    pm.expect(pm.response.code).to.be.oneOf([201, 400]);\r", "});\r", ""], "type": "text/javascript"}}, {"listen": "prerequest", "script": {"id": "7a8dce22-dafd-4251-a849-5846494109a0", "exec": [""], "type": "text/javascript"}}], "id": "306ce119-feaa-45d3-86ec-d8349b7afaff", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n    \"code\": \"BRoom\",\r\n    \"description\": \"Building for Room tests\",\r\n    \"floorSizeLength\": 1000,\r\n    \"floorSizeWidth\": 1000\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/building", "host": ["{{baseUrl}}"], "path": ["building"]}}, "response": [], "uid": "30686839-306ce119-feaa-45d3-86ec-d8349b7afaff"}, {"name": "[Pre] Create Floor BRoom1", "event": [{"listen": "prerequest", "script": {"id": "c23a6f59-1283-42ef-bc05-46a17153fda8", "exec": [""], "type": "text/javascript"}}, {"listen": "test", "script": {"id": "136a32b4-37f9-4a0d-af63-edd48f22e9a5", "exec": ["pm.test(\"Creation is successful or already exists\", function () {\r", "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 500]);\r", "    var jsonData = pm.response.json();\r", "    if (pm.response.code == 201) {\r", "        pm.collectionVariables.set(\"lastCreatedFloorId\", jsonData.id);\r", "    }\r", "});"], "type": "text/javascript"}}], "id": "fc7f7ae3-bf4a-472b-bdf9-831b8eb7044f", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n    \"floorNumber\": 1,\r\n    \"description\": \"Floor for room tests\",\r\n    \"servedByElevator\": true,\r\n    \"buildingCode\":\"BRoom\"\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/floor", "host": ["{{baseUrl}}"], "path": ["floor"]}}, "response": [], "uid": "30686839-fc7f7ae3-bf4a-472b-bdf9-831b8eb7044f"}, {"name": "Create room with full body - Success", "event": [{"listen": "test", "script": {"id": "18ad02f1-9d58-42b5-8aab-8624e2f3d504", "exec": ["let jsonData = pm.response.json();\r", "\r", "pm.test(\"Room created\", function () {\r", "    pm.expect(pm.response.code).to.eql(201);\r", "});\r", "\r", "pm.collectionVariables.set(\"nextAvailablePosX\", jsonData.position.x + jsonData.size.length + 1);\r", "pm.collectionVariables.set(\"nextAvailablePosY\", jsonData.position.y + jsonData.size.width + 1);\r", "\r", "pm.test(\"Response body has correct structure and values\", function () {\r", "    // Get request variables\r", "    let requestName = pm.collectionVariables.get(\"myRandomWords\");\r", "    let requestDescription = pm.collectionVariables.get(\"myRandomDescription\");\r", "    let requestWidth = pm.collectionVariables.get(\"myRandomRoomSizeWidth\");\r", "    let requestLength = pm.collectionVariables.get(\"myRandomRoomSizeLength\");\r", "    let requestPositionX = pm.collectionVariables.get(\"myRandomRoomPositionX\");\r", "    let requestPositionY = pm.collectionVariables.get(\"myRandomRoomPositionY\");\r", "    let requestCategory = pm.collectionVariables.get(\"myRandomCategory\");\r", "    let requestFloorId = pm.collectionVariables.get(\"lastCreatedFloorId\");\r", "\r", "    // Validate the response body\r", "    pm.expect(jsonData.name).to.eql(requestName, \"Name does not match\");\r", "    pm.expect(jsonData.description).to.eql(requestDescription, \"Description does not match\");\r", "    pm.expect(jsonData.size.width).to.eql(parseInt(requestWidth), \"Width does not match\");\r", "    pm.expect(jsonData.size.length).to.eql(parseInt(requestLength), \"Length does not match\");\r", "    pm.expect(jsonData.position.x).to.eql(parseInt(requestPositionX), \"Position X does not match\");\r", "    pm.expect(jsonData.position.y).to.eql(parseInt(requestPositionY), \"Position Y does not match\");\r", "    pm.expect(jsonData.category).to.eql(requestCategory, \"Category does not match\");\r", "    pm.expect(jsonData.floorId).to.eql(requestFloorId, \"Floor ID does not match\");\r", "});"], "type": "text/javascript"}}], "id": "21fd8dd4-6c45-476b-b461-f1d0f6811b69", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n    \"name\": \"{{myRandomWords}}\",\r\n    \"description\": \"{{myRandomDescription}}\",\r\n    \"size\": {\r\n        \"width\": {{myRandomRoomSizeWidth}},\r\n        \"length\": {{myRandomRoomSizeLength}}\r\n    },\r\n    \"position\": {\r\n        \"x\": {{myRandomRoomPositionX}},\r\n        \"y\": {{myRandomRoomPositionY}}\r\n    },\r\n    \"category\": \"{{myRandomCategory}}\",\r\n    \"floorId\": \"{{lastCreatedFloorId}}\"\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/room", "host": ["{{baseUrl}}"], "path": ["room"]}}, "response": [], "uid": "30686839-21fd8dd4-6c45-476b-b461-f1d0f6811b69"}, {"name": "Create room on same floor - Success", "event": [{"listen": "test", "script": {"id": "18ad02f1-9d58-42b5-8aab-8624e2f3d504", "exec": ["let jsonData = pm.response.json();\r", "\r", "pm.test(\"Room created\", function () {\r", "    pm.expect(pm.response.code).to.eql(201);\r", "});\r", "\r", "pm.collectionVariables.set(\"nextAvailablePosX\", jsonData.position.x + jsonData.size.length + 1);\r", "pm.collectionVariables.set(\"nextAvailablePosY\", jsonData.position.y + jsonData.size.width + 1);\r", "\r", "pm.test(\"Response body has correct structure and values\", function () {\r", "    // Get request variables\r", "    let requestName = pm.collectionVariables.get(\"myRandomWords\");\r", "    let requestDescription = pm.collectionVariables.get(\"myRandomDescription\");\r", "    let requestWidth = pm.collectionVariables.get(\"myRandomRoomSizeWidth\");\r", "    let requestLength = pm.collectionVariables.get(\"myRandomRoomSizeLength\");\r", "    let requestPositionX = pm.variables.get(\"myRandomRoomPositionX\");\r", "    let requestPositionY = pm.variables.get(\"myRandomRoomPositionY\");\r", "    let requestCategory = pm.collectionVariables.get(\"myRandomCategory\");\r", "    let requestFloorId = pm.collectionVariables.get(\"lastCreatedFloorId\");\r", "\r", "    // Validate the response body\r", "    pm.expect(jsonData.name).to.eql(requestName, \"Name does not match\");\r", "    pm.expect(jsonData.description).to.eql(requestDescription, \"Description does not match\");\r", "    pm.expect(jsonData.size.width).to.eql(parseInt(requestWidth), \"Width does not match\");\r", "    pm.expect(jsonData.size.length).to.eql(parseInt(requestLength), \"Length does not match\");\r", "    pm.expect(jsonData.position.x).to.eql(parseInt(requestPositionX), \"Position X does not match\");\r", "    pm.expect(jsonData.position.y).to.eql(parseInt(requestPositionY), \"Position Y does not match\");\r", "    pm.expect(jsonData.category).to.eql(requestCategory, \"Category does not match\");\r", "    pm.expect(jsonData.floorId).to.eql(requestFloorId, \"Floor ID does not match\");\r", "});"], "type": "text/javascript"}}, {"listen": "prerequest", "script": {"id": "be7f700d-69a9-4066-9ee7-f28bf23907e0", "exec": ["let nextAvailablePosX = parseInt(pm.collectionVariables.get(\"nextAvailablePosX\"), 10);\r", "let nextAvailablePosY = parseInt(pm.collectionVariables.get(\"nextAvailablePosY\"), 10);\r", "\r", "if (isNaN(nextAvailablePosX)) {\r", "    nextAvailablePosX = 1;\r", "}\r", "\r", "if (isNaN(nextAvailablePosY)) {\r", "    nextAvailablePosY = 1;\r", "}\r", "\r", "pm.variables.set(\"myRandomRoomPositionX\", nextAvailablePosX);\r", "pm.variables.set(\"myRandomRoomPositionY\", nextAvailablePosY);\r", "\r", ""], "type": "text/javascript"}}], "id": "091ccd69-fbae-496b-bd54-7fd21550e957", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n    \"name\": \"{{myRandomWords}}\",\r\n    \"description\": \"{{myRandomDescription}}\",\r\n    \"size\": {\r\n        \"width\": {{myRandomRoomSizeWidth}},\r\n        \"length\": {{myRandomRoomSizeLength}}\r\n    },\r\n    \"position\": {\r\n        \"x\": {{myRandomRoomPositionX}},\r\n        \"y\": {{myRandomRoomPositionY}}\r\n    },\r\n    \"category\": \"{{myRandomCategory}}\",\r\n    \"floorId\": \"{{lastCreatedFloorId}}\"\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/room", "host": ["{{baseUrl}}"], "path": ["room"]}}, "response": [], "uid": "30686839-091ccd69-fbae-496b-bd54-7fd21550e957"}, {"name": "Create overlaping room on same floor - Failure", "event": [{"listen": "test", "script": {"id": "18ad02f1-9d58-42b5-8aab-8624e2f3d504", "exec": ["let jsonData = pm.response.json();\r", "\r", "pm.test(\"Room created\", function () {\r", "    pm.expect(pm.response.code).to.eql(400);\r", "});\r", "\r", "pm.test(\"Response body has correct error message\", function () {\r", "    pm.expect(jsonData.message).to.eql(\"Room overlaps with another room\");\r", "});"], "type": "text/javascript"}}, {"listen": "prerequest", "script": {"id": "be7f700d-69a9-4066-9ee7-f28bf23907e0", "exec": ["let nextAvailablePosX = parseInt(pm.collectionVariables.get(\"nextAvailablePosX\"), 10);\r", "let nextAvailablePosY = parseInt(pm.collectionVariables.get(\"nextAvailablePosY\"), 10);\r", "\r", "if (isNaN(nextAvailablePosX)) {\r", "    nextAvailablePosX = -1;\r", "}\r", "\r", "if (isNaN(nextAvailablePosY)) {\r", "    nextAvailablePosY = -1;\r", "}\r", "\r", "pm.variables.set(\"myRandomRoomPositionX\", nextAvailablePosX -3);\r", "pm.variables.set(\"myRandomRoomPositionY\", nextAvailablePosY -3);\r", "\r", ""], "type": "text/javascript"}}], "id": "dbe58185-b50e-4fa7-b715-f8e7ad0b3389", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n    \"name\": \"{{myRandomWords}}\",\r\n    \"description\": \"{{myRandomDescription}}\",\r\n    \"size\": {\r\n        \"width\": {{myRandomRoomSizeWidth}},\r\n        \"length\": {{myRandomRoomSizeLength}}\r\n    },\r\n    \"position\": {\r\n        \"x\": {{myRandomRoomPositionX}},\r\n        \"y\": {{myRandomRoomPositionY}}\r\n    },\r\n    \"category\": \"{{myRandomCategory}}\",\r\n    \"floorId\": \"{{lastCreatedFloorId}}\"\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/room", "host": ["{{baseUrl}}"], "path": ["room"]}}, "response": [], "uid": "30686839-dbe58185-b50e-4fa7-b715-f8e7ad0b3389"}], "event": [{"listen": "prerequest", "script": {"id": "052d7fae-b3cc-4626-8a9a-65a1505a9010", "type": "text/javascript", "exec": ["// Reuse the functions if needed", "const spacesRegex = /\\s/g;", "function randomString(length, chars) {", "    let result = '';", "    while (result.length < length) {", "        let char = chars[Math.floor(Math.random() * chars.length)];", "        if ((result.length === 0 || result.length === length - 1) && char === ' ') {", "            continue; ", "        }", "        result += char;", "    }", "    result = result.trim();  ", "    return result;", "}", "", "function randomAlphanumericString(length, withSpaces = false) {", "    let characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';", "    if (withSpaces) characters += ' '.repeat(10);", "    return randomString(length, characters);", "}", "", "// Update the code below for the tested domain object", "", "let myRandomName = randomAlphanumericString(50, true);", "myRandomName = myRandomName.slice(1, 50);", "// custom random words with only a-z A-Z 0-9 characters (and spaces)", "let myRandomWords = pm.variables.replaceIn('{{$randomWords}}');", "myRandomWords = myRandomWords.replace(/[^a-zA-Z0-9]+/g, ' ').replace(/\\s+/g, ' ');", "myRandomWords = myRandomWords.trim();", "// Room size between 1 and 10", "const myRandomRoomSizeLength = Math.floor(Math.random() * 10) + 1;", "const myRandomRoomSizeWidth = Math.floor(Math.random() * 10) + 1;", "// Position between 1 and 100", "const myRandomRoomPositionX = Math.floor(Math.random() * 100) + 1;", "const myRandomRoomPositionY = Math.floor(Math.random() * 100) + 1;", "", "let myRandomDescription = pm.variables.replaceIn('{{$randomPhrase}}');", "myRandomDescription = myRandomDescription.slice(0, 255);", "", "const categories = ['Office', 'Amphitheater', 'Laboratory', 'Other'];", "let myRandomCategory = categories[Math.floor(Math.random() * categories.length)];", "", "", "// Set the variables for the collection requests to access", "pm.collectionVariables.set(\"myRandomName\", myRandomName);", "pm.collectionVariables.set(\"myRandomWords\", myRandomWords);", "pm.collectionVariables.set(\"myRandomDescription\", myRandomDescription);", "pm.collectionVariables.set(\"myRandomRoomSizeLength\", myRandomRoomSizeLength);", "pm.collectionVariables.set(\"myRandomRoomSizeWidth\", myRandomRoomSizeWidth);", "pm.collectionVariables.set(\"myRandomRoomPositionX\", myRandomRoomPositionX);", "pm.collectionVariables.set(\"myRandomRoomPositionY\", myRandomRoomPositionY);", "pm.collectionVariables.set(\"myRandomCategory\", myRandomCategory);", ""]}}, {"listen": "test", "script": {"id": "f2188a8c-649d-479a-b993-1d8dc5047bb1", "type": "text/javascript", "exec": [""]}}], "variable": [{"key": "myRandomName", "value": "initial name", "type": "string"}, {"key": "myRandomDescription", "value": "initial description", "type": "string"}, {"key": "myRandomWords", "value": "initial words", "type": "string"}, {"key": "myRandomRoomSizeLength", "value": "10", "type": "string"}, {"key": "myRandomRoomSizeWidth", "value": "12", "type": "string"}, {"key": "myRandomRoomPositionX", "value": "1", "type": "string"}, {"key": "myRandomRoomPositionY", "value": "2", "type": "string"}, {"key": "myRandomCategory", "value": "Office", "type": "string"}, {"key": "lastCreatedFloorId", "value": ""}, {"key": "nextAvailablePosX", "value": "0"}, {"key": "nextAvailablePosY", "value": "0"}, {"key": "baseUrl", "value": "localhost:4000/api", "type": "string"}]}