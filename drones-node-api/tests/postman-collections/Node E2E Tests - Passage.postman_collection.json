{"info": {"_postman_id": "dd1cae1d-494f-4778-a7f5-9538061df1b3", "name": "Node E2E Tests - Passage", "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json", "updatedAt": "2023-11-16T08:54:10.000Z", "uid": "30686794-dd1cae1d-494f-4778-a7f5-9538061df1b3"}, "item": [{"name": "[Pre] Create Buildings PB PC PD PE PF PG (run until no building is created)", "event": [{"listen": "test", "script": {"id": "7dfe080a-d754-4c8b-afd5-a15b02d298a8", "exec": ["// Change this test if doesn't work for your test case\r", "pm.test(\"Creation is successful or already exists\", function () {\r", "    pm.expect(pm.response.code).to.be.oneOf([201, 400]);\r", "});\r", "\r", "// Update variable names for your test case if needed\r", "let buildingCodes = JSON.parse(pm.environment.get('buildingCodes'));\r", "\r", "// Update variable names for your test case if needed\r", "if (buildingCodes.length > 0) {\r", "    postman.setNextRequest(pm.info.requestName);\r", "} else {\r", "    // Clean up environment (change variable names)\r", "    pm.environment.unset(\"buildingCodes\");\r", "    pm.environment.unset(\"currentBuildingCode\");\r", "}"], "type": "text/javascript"}}, {"listen": "prerequest", "script": {"id": "7a8dce22-dafd-4251-a849-5846494109a0", "exec": ["// Update variable names if needed for your test case\r", "\r", "let buildingCodes = pm.environment.get('buildingCodes');\r", "\r", "// Set wanted building codes to create buildings with in the array:\r", "buildingCodes = !buildingCodes ? ['PB', 'PC', 'PD', 'PE', 'PF', 'PG'] : JSON.parse(buildingCodes);\r", "\r", "let currentBuildingCode = buildingCodes.shift();\r", "pm.environment.set('buildingCodes', JSON.stringify(buildingCodes));\r", "pm.environment.set('currentBuildingCode', currentBuildingCode);\r", ""], "type": "text/javascript"}}], "id": "9ea7ce82-1e64-49b4-8156-d4439a88f4a7", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n    \"code\": \"{{currentBuildingCode}}\",\r\n    \"floorSizeLength\": 1000,\r\n    \"floorSizeWidth\": 1000\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/building", "host": ["{{baseUrl}}"], "path": ["building"]}}, "response": [], "uid": "30686794-9ea7ce82-1e64-49b4-8156-d4439a88f4a7"}, {"name": "[Pre] Create Floor PF8", "event": [{"listen": "prerequest", "script": {"id": "c23a6f59-1283-42ef-bc05-46a17153fda8", "exec": [""], "type": "text/javascript"}}, {"listen": "test", "script": {"id": "136a32b4-37f9-4a0d-af63-edd48f22e9a5", "exec": ["pm.test(\"Creation is successful or already exists\", function () {\r", "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 500]);\r", "})"], "type": "text/javascript"}}], "id": "edc1c4b6-d224-4c1a-916b-90e04cd08451", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n    \"floorNumber\": 8,\r\n    \"description\": \"created for passage tests\",\r\n    \"servedByElevator\":\"{{$randomBoolean}}\",\r\n    \"buildingCode\":\"PF\"\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/floor", "host": ["{{baseUrl}}"], "path": ["floor"]}}, "response": [], "uid": "30686794-edc1c4b6-d224-4c1a-916b-90e04cd08451"}, {"name": "[Pre] Create Floor PG8", "event": [{"listen": "prerequest", "script": {"id": "c23a6f59-1283-42ef-bc05-46a17153fda8", "exec": [""], "type": "text/javascript"}}, {"listen": "test", "script": {"id": "136a32b4-37f9-4a0d-af63-edd48f22e9a5", "exec": ["pm.test(\"Creation is successful or already exists\", function () {\r", "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 500]);\r", "})"], "type": "text/javascript"}}], "id": "08b6710f-a0e8-4393-8c0f-423d01689747", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n    \"floorNumber\": 8,\r\n    \"description\": \"created for passage tests\",\r\n    \"servedByElevator\":\"{{$randomBoolean}}\",\r\n    \"buildingCode\":\"PG\"\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/floor", "host": ["{{baseUrl}}"], "path": ["floor"]}}, "response": [], "uid": "30686794-08b6710f-a0e8-4393-8c0f-423d01689747"}, {"name": "[Pre] Create Floor PF5", "event": [{"listen": "prerequest", "script": {"id": "c23a6f59-1283-42ef-bc05-46a17153fda8", "exec": [""], "type": "text/javascript"}}, {"listen": "test", "script": {"id": "136a32b4-37f9-4a0d-af63-edd48f22e9a5", "exec": ["pm.test(\"Creation is successful or already exists\", function () {\r", "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 500]);\r", "})"], "type": "text/javascript"}}], "id": "03f3e332-b238-4b29-b81c-5e1c6102434c", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n    \"floorNumber\": 5,\r\n    \"description\": \"created for passage tests\",\r\n    \"servedByElevator\":\"{{$randomBoolean}}\",\r\n    \"buildingCode\":\"PF\"\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/floor", "host": ["{{baseUrl}}"], "path": ["floor"]}}, "response": [], "uid": "30686794-03f3e332-b238-4b29-b81c-5e1c6102434c"}, {"name": "[Pre] Create Floor PG5", "event": [{"listen": "prerequest", "script": {"id": "c23a6f59-1283-42ef-bc05-46a17153fda8", "exec": [""], "type": "text/javascript"}}, {"listen": "test", "script": {"id": "136a32b4-37f9-4a0d-af63-edd48f22e9a5", "exec": ["pm.test(\"Creation is successful or already exists\", function () {\r", "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 500]);\r", "})"], "type": "text/javascript"}}], "id": "e9a08de1-a071-484d-9993-eed42a0c45e9", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n    \"floorNumber\": 5,\r\n    \"description\": \"created for passage tests\",\r\n    \"servedByElevator\":\"{{$randomBoolean}}\",\r\n    \"buildingCode\":\"PG\"\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/floor", "host": ["{{baseUrl}}"], "path": ["floor"]}}, "response": [], "uid": "30686794-e9a08de1-a071-484d-9993-eed42a0c45e9"}, {"name": "[Pre] Create Floor PC1", "event": [{"listen": "prerequest", "script": {"id": "c23a6f59-1283-42ef-bc05-46a17153fda8", "exec": [""], "type": "text/javascript"}}, {"listen": "test", "script": {"id": "136a32b4-37f9-4a0d-af63-edd48f22e9a5", "exec": ["pm.test(\"Creation is successful or already exists\", function () {\r", "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 500]);\r", "})"], "type": "text/javascript"}}], "id": "f81bf099-72f3-4064-95df-cc2ba99a9634", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n    \"floorNumber\": 1,\r\n    \"description\": \"created for passage tests\",\r\n    \"servedByElevator\":\"{{$randomBoolean}}\",\r\n    \"buildingCode\":\"PC\"\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/floor", "host": ["{{baseUrl}}"], "path": ["floor"]}}, "response": [], "uid": "30686794-f81bf099-72f3-4064-95df-cc2ba99a9634"}, {"name": "Create a Passage between two buildings - Success", "event": [{"listen": "test", "script": {"id": "66f23818-6c11-4aba-b879-5367bbe2d609", "exec": ["pm.test(\"Status code is 201\", function () {\r", "    pm.response.to.have.status(201);\r", "});\r", "pm.test(\"Response must be valid and have a buildingcode 1 \", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('buildingCode1');\r", "});\r", "pm.test(\"Response must be valid and have a buildingcode 2\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('buildingCode2');\r", "});\r", "pm.test(\"Response must be valid and have a floorNumber1\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('floorNumber1');\r", "    pm.expect(jsonData.floorNumber1).to.be.a('number');\r", "});\r", "pm.test(\"Response must be valid and have a floorNumber2\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('floorNumber2');\r", "    pm.expect(jsonData.floorNumber2).to.be.a('number');\r", "});"], "type": "text/javascript"}}], "id": "c391d4f1-011f-42f7-b10e-a0c9ac7fe7c9", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n  \"buildingCode1\": \"PF\",\r\n  \"buildingCode2\": \"PG\",\r\n  \"floorNumber1\": 8,\r\n  \"floorNumber2\":8\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/passage", "host": ["{{baseUrl}}"], "path": ["passage"]}}, "response": [], "uid": "30686794-c391d4f1-011f-42f7-b10e-a0c9ac7fe7c9"}, {"name": "Create a Passage between same two building different floors - Success", "event": [{"listen": "test", "script": {"id": "66f23818-6c11-4aba-b879-5367bbe2d609", "exec": ["pm.test(\"Status code is 201\", function () {\r", "    pm.response.to.have.status(201);\r", "});\r", "pm.test(\"Response must be valid and have a buildingcode 1 \", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('buildingCode1');\r", "});\r", "pm.test(\"Response must be valid and have a buildingcode 2\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('buildingCode2');\r", "});\r", "pm.test(\"Response must be valid and have a floorNumber1\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('floorNumber1');\r", "    pm.expect(jsonData.floorNumber1).to.be.a('number');\r", "});\r", "pm.test(\"Response must be valid and have a floorNumber2\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('floorNumber2');\r", "    pm.expect(jsonData.floorNumber2).to.be.a('number');\r", "});"], "type": "text/javascript"}}], "id": "c4018a67-e743-4243-90f8-f2d8ebdabcc5", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n  \"buildingCode1\": \"PF\",\r\n  \"buildingCode2\": \"PG\",\r\n  \"floorNumber1\": 5,\r\n  \"floorNumber2\":5\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/passage", "host": ["{{baseUrl}}"], "path": ["passage"]}}, "response": [], "uid": "30686794-c4018a67-e743-4243-90f8-f2d8ebdabcc5"}, {"name": "Get all Passages - Success", "event": [{"listen": "test", "script": {"id": "66f23818-6c11-4aba-b879-5367bbe2d609", "exec": ["pm.test(\"Status code is 200\", function () {\r", "    pm.response.to.have.status(200);\r", "});\r", "\r", "let jsonData = pm.response.json();\r", "\r", "pm.test(\"Response data is array of length of 2\", function () {\r", "    pm.expect(jsonData).to.be.an('array')\r", "    pm.expect(jsonData.length).to.eql(2);\r", "});\r", ""], "type": "text/javascript"}}], "id": "973da463-a0bf-4774-9083-e5d8f383aad8", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "GET", "header": [], "url": {"raw": "{{baseUrl}}/passage", "host": ["{{baseUrl}}"], "path": ["passage"]}}, "response": [], "uid": "30686794-973da463-a0bf-4774-9083-e5d8f383aad8"}, {"name": "Create a Passage between other buildings - Success", "event": [{"listen": "test", "script": {"id": "66f23818-6c11-4aba-b879-5367bbe2d609", "exec": ["pm.test(\"Status code is 201\", function () {\r", "    pm.response.to.have.status(201);\r", "});\r", "pm.test(\"Response must be valid and have a buildingcode 1 \", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('buildingCode1');\r", "});\r", "pm.test(\"Response must be valid and have a buildingcode 2\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('buildingCode2');\r", "});\r", "pm.test(\"Response must be valid and have a floorNumber1\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('floorNumber1');\r", "    pm.expect(jsonData.floorNumber1).to.be.a('number');\r", "});\r", "pm.test(\"Response must be valid and have a floorNumber2\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('floorNumber2');\r", "    pm.expect(jsonData.floorNumber2).to.be.a('number');\r", "});"], "type": "text/javascript"}}], "id": "61fa8efb-65ea-44d5-97b9-ae168f29970e", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n  \"buildingCode1\": \"PC\",\r\n  \"buildingCode2\": \"PG\",\r\n  \"floorNumber1\": 1,\r\n  \"floorNumber2\": 5\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/passage", "host": ["{{baseUrl}}"], "path": ["passage"]}}, "response": [], "uid": "30686794-61fa8efb-65ea-44d5-97b9-ae168f29970e"}, {"name": "Get Passages between buildings PC and PG - Success", "event": [{"listen": "test", "script": {"id": "66f23818-6c11-4aba-b879-5367bbe2d609", "exec": ["pm.test(\"Status code is 200\", function () {\r", "    pm.response.to.have.status(200);\r", "});\r", "\r", "let jsonData = pm.response.json();\r", "\r", "pm.test(\"Response data is array of length of 1\", function () {\r", "    pm.expect(jsonData).to.be.an('array')\r", "    pm.expect(jsonData.length).to.eql(1);\r", "});\r", ""], "type": "text/javascript"}}], "id": "23223873-ce7e-4cb3-984f-77682260c28e", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "GET", "header": [], "url": {"raw": "{{baseUrl}}/passage?buildingCode1=PC&buildingCode2=PG", "host": ["{{baseUrl}}"], "path": ["passage"], "query": [{"key": "buildingCode1", "value": "PC"}, {"key": "buildingCode2", "value": "PG"}]}}, "response": [], "uid": "30686794-23223873-ce7e-4cb3-984f-77682260c28e"}, {"name": "Get Passages with only one query param - Failure", "event": [{"listen": "test", "script": {"id": "66f23818-6c11-4aba-b879-5367bbe2d609", "exec": ["pm.test(\"Status code is 400\", function () {\r", "    pm.response.to.have.status(400);\r", "});\r", "\r", "let jsonData = pm.response.json();\r", "\r", "pm.test(\"Response data is array of length of 1\", function () {\r", "    pm.expect(jsonData.message).to.include(\"required peers\");\r", "});\r", ""], "type": "text/javascript"}}], "id": "b425983a-023c-4e72-9b0d-8548ebce7006", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "GET", "header": [], "url": {"raw": "{{baseUrl}}/passage?buildingCode1=PC", "host": ["{{baseUrl}}"], "path": ["passage"], "query": [{"key": "buildingCode2", "value": "G", "disabled": true}, {"key": "buildingCode1", "value": "PC"}]}}, "response": [], "uid": "30686794-b425983a-023c-4e72-9b0d-8548ebce7006"}, {"name": "Create a Passage with nonexisting buildingCode - Failure", "event": [{"listen": "test", "script": {"id": "c925a76e-f52a-48cd-a9c7-2bb6d7ed2f51", "exec": ["pm.test(\"Status code is 400\", function () {\r", "    pm.response.to.have.status(400);\r", "});\r", "\r", "pm.test(\"Error message for buildingCode not existsing\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData.message).to.eql('Floor1 does not belong to building1 that might not exist');\r", "})\r", "\r", ""], "type": "text/javascript"}}], "id": "36c1dda8-3b7d-45e8-b155-836b8326a7f4", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n  \"buildingCode1\": \"{{$randomAlphaNumeric}}\",\r\n  \"buildingCode2\": \"PC\",\r\n  \"floorNumber1\": 1,\r\n  \"floorNumber2\": 1\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/passage", "host": ["{{baseUrl}}"], "path": ["passage"]}}, "response": [], "uid": "30686794-36c1dda8-3b7d-45e8-b155-836b8326a7f4"}, {"name": "Create a Passage with nonexisting floorNumber - Failure", "event": [{"listen": "test", "script": {"id": "b41ed15f-9650-4f40-87b2-ef0958bbf3d1", "exec": ["pm.test(\"Status code is 400\", function () {\r", "    pm.response.to.have.status(400);\r", "});\r", "\r", "pm.test(\"Error message for buildingCode not existsing\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData.message).to.eql('Floor2 does not belong to building2 that might not exist');\r", "})"], "type": "text/javascript"}}], "id": "f243e7df-0483-4913-9e94-6097928e315e", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n  \"buildingCode1\": \"PC\",\r\n  \"buildingCode2\": \"PD\",\r\n  \"floorNumber1\": 1,\r\n  \"floorNumber2\": 975645\r\n}", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/passage", "host": ["{{baseUrl}}"], "path": ["passage"]}}, "response": [], "uid": "30686794-f243e7df-0483-4913-9e94-6097928e315e"}, {"name": "Get two floors with two passage to diferent buildings", "event": [{"listen": "test", "script": {"id": "be8d186d-889d-4768-b9ce-a70c42d8bce2", "exec": ["pm.test(\"Status code is 200\", function () {\r", "    pm.response.to.have.status(200);\r", "});\r", "\r", "let response = pm.response.json();\r", "\r", "pm.test(\"is an array with two elements\", function () {\r", "    pm.expect(response).to.be.a('array');\r", "    pm.expect(response.length).to.equal(2);\r", "});\r", "\r", "pm.test(\"Floor 1 response is valid\", function () {\r", "    let jsonResponse = response[0];\r", "\r", "    pm.expect(jsonResponse).to.have.property('floorNumber');\r", "    pm.expect(jsonResponse).to.have.property('description');\r", "    pm.expect(jsonResponse).to.have.property('servedByElevator');\r", "    pm.expect(jsonResponse).to.have.property('buildingCode');\r", "\r", "    pm.expect(parseInt(jsonResponse.floorNumber, 10)).to.be.a('number');\r", "    pm.expect(jsonResponse.description).to.be.a('string');\r", "    pm.expect(jsonResponse.servedByElevator).to.be.a('boolean');\r", "    \r", "    pm.expect(jsonResponse.buildingCode).to.eql('PG');\r", "    pm.expect(jsonResponse.floorNumber).to.equal(8);\r", "});\r", "\r", "\r", "pm.test(\"Floor 2 response is valid\", function () {\r", "    let jsonResponse = response[1];\r", "\r", "    pm.expect(jsonResponse).to.have.property('floorNumber');\r", "    pm.expect(jsonResponse).to.have.property('description');\r", "    pm.expect(jsonResponse).to.have.property('servedByElevator');\r", "    pm.expect(jsonResponse).to.have.property('buildingCode');\r", "\r", "    pm.expect(parseInt(jsonResponse.floorNumber, 10)).to.be.a('number');\r", "    pm.expect(jsonResponse.description).to.be.a('string');\r", "    pm.expect(jsonResponse.servedByElevator).to.be.a('boolean');\r", "    \r", "    pm.expect(jsonResponse.buildingCode).to.eql('PG');\r", "    pm.expect(jsonResponse.floorNumber).to.equal(5);\r", "});\r", ""], "type": "text/javascript"}}], "id": "d9a3bb9c-1676-4bf5-ad49-35efb27fc883", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "GET", "header": [], "url": {"raw": "{{baseUrl}}/passage/toDifferentBuildings?buildingCode=PG", "host": ["{{baseUrl}}"], "path": ["passage", "toDifferentBuildings"], "query": [{"key": "buildingCode", "value": "PG"}]}}, "response": [], "uid": "30686794-d9a3bb9c-1676-4bf5-ad49-35efb27fc883"}, {"name": "Get floors with passages to other buildings from unexisting building - empty", "event": [{"listen": "test", "script": {"id": "2334f4a0-485b-4867-9ab2-d196dc2f62c1", "exec": ["pm.test(\"Status code is 200\", function () {\r", "    pm.response.to.have.status(200);\r", "});\r", "\r", "let response = pm.response.json();\r", "\r", "pm.test(\"is an array with two elements\", function () {\r", "    pm.expect(response).to.be.a('array');\r", "    pm.expect(response.length).to.equal(0);\r", "});"], "type": "text/javascript"}}], "id": "2302b54f-f64e-49e0-a630-cb6b302c1100", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "GET", "header": [], "url": {"raw": "{{baseUrl}}/passage/toDifferentBuildings?buildingCode=AAAA", "host": ["{{baseUrl}}"], "path": ["passage", "toDifferentBuildings"], "query": [{"key": "buildingCode", "value": "AAAA"}]}}, "response": [], "uid": "30686794-2302b54f-f64e-49e0-a630-cb6b302c1100"}], "event": [{"listen": "prerequest", "script": {"id": "f41004d1-9130-4391-9122-2662cb86ba29", "type": "text/javascript", "exec": [""]}}, {"listen": "test", "script": {"id": "35723c42-5256-4e8e-8c23-2be5eb45361b", "type": "text/javascript", "exec": [""]}}], "variable": [{"key": "baseUrl", "value": "localhost:4000/api", "type": "string"}]}