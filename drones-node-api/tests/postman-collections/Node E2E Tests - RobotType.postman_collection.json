{"info": {"_postman_id": "d20e62dd-ff1c-437f-ad62-d5cf9af564ce", "name": "Node E2E Tests - RobotType", "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json", "updatedAt": "2023-11-16T09:24:36.000Z", "uid": "30686794-d20e62dd-ff1c-437f-ad62-d5cf9af564ce"}, "item": [{"name": "Create RobotType - Success", "event": [{"listen": "test", "script": {"id": "838b7acf-5b61-4501-912f-7dac93853067", "exec": ["pm.test(\"Status code is 201\", function () {\r", "    pm.response.to.have.status(201);\r", "});\r", "\r", "pm.test(\"Response should be JSON\", function () {\r", "    pm.response.to.be.json;\r", "});\r", "\r", "pm.test(\"Response must have a name\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('name');\r", "    pm.expect(jsonData.name).to.be.a('string');\r", "});\r", "\r", "pm.test(\"Response must have a brand\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('brand');\r", "    pm.expect(jsonData.brand).to.be.a('string');\r", "});\r", "\r", "pm.test(\"Response must have a model\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('model');\r", "    pm.expect(jsonData.model).to.be.a('string');\r", "});\r", "\r", "pm.test(\"Response has valid typesOfTasks\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('typesOfTasks');\r", "    pm.expect(jsonData.typesOfTasks).to.be.an('array');\r", "    pm.expect(jsonData.typesOfTasks).to.include('Surveillance');\r", "    pm.expect(jsonData.typesOfTasks).to.include('PickUpAndDelivery');\r", "});\r", "\r", ""], "type": "text/javascript"}}], "id": "6e8d79b5-03b5-428a-b8cd-ba5432c670c0", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n  \"name\": \"{{myRandomName}}\",\r\n  \"brand\": \"{{myRandomBrand}}\",\r\n  \"model\": \"{{myRandomModel}}\",\r\n  \"typesOfTasks\": [\"Surveillance\", \"PickUpAndDelivery\"]\r\n}\r\n", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/robotType", "host": ["{{baseUrl}}"], "path": ["robotType"]}}, "response": [], "uid": "30686794-6e8d79b5-03b5-428a-b8cd-ba5432c670c0"}, {"name": "Create RobotType with incorrect name - Failure", "event": [{"listen": "test", "script": {"id": "838b7acf-5b61-4501-912f-7dac93853067", "exec": ["pm.test(\"Status code is 400\", function () {\r", "    pm.response.to.have.status(400);\r", "});\r", "\r", "pm.test(\"Error response has a message property\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('message');\r", "});\r", "\r", "pm.test(\"Error message for incorrect name\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData.message).to.eql('name can only contain alphanumeric characters');\r", "});"], "type": "text/javascript"}}], "id": "dd6d7fc7-0a41-4ace-a95e-0fa97a3b6411", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n  \"name\": \"ABC123!#\u00a4\",\r\n  \"brand\": \"{{$randomAlphaNumeric}}\",\r\n  \"model\": \"{{$randomAlphaNumeric}}\",\r\n  \"typesOfTasks\": [\"Surveillance\", \"PickUpAndDelivery\"]\r\n}\r\n", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/robotType", "host": ["{{baseUrl}}"], "path": ["robotType"]}}, "response": [], "uid": "30686794-dd6d7fc7-0a41-4ace-a95e-0fa97a3b6411"}, {"name": "Create RobotType without name - Failure", "event": [{"listen": "test", "script": {"id": "838b7acf-5b61-4501-912f-7dac93853067", "exec": ["pm.test(\"Status code is 400\", function () {\r", "    pm.response.to.have.status(400);\r", "});\r", "\r", "pm.test(\"Error response has a message property\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('message');\r", "});\r", "\r", "pm.test(\"Error message for no name\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData.message).to.eql('child \\\"name\\\" fails because [\\\"name\\\" is not allowed to be empty]');\r", "});"], "type": "text/javascript"}}], "id": "6ed9b0b9-0c06-4b3c-a62d-b56bb0211bbb", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n  \"name\": \"\",\r\n  \"brand\": \"{{$randomAlphaNumeric}}\",\r\n  \"model\": \"{{$randomAlphaNumeric}}\",\r\n  \"typesOfTasks\": [\"Surveillance\", \"PickUpAndDelivery\"]\r\n}\r\n", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/robotType", "host": ["{{baseUrl}}"], "path": ["robotType"]}}, "response": [], "uid": "30686794-6ed9b0b9-0c06-4b3c-a62d-b56bb0211bbb"}, {"name": "Create RobotType without tasktype - Failure", "event": [{"listen": "test", "script": {"id": "838b7acf-5b61-4501-912f-7dac93853067", "exec": ["pm.test(\"Status code is 400\", function () {\r", "    pm.response.to.have.status(400);\r", "});\r", "\r", "pm.test(\"Error response has a message property\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData).to.have.property('message');\r", "});\r", "\r", "pm.test(\"Error message for no task type\", function () {\r", "    var jsonData = pm.response.json();\r", "    pm.expect(jsonData.message).to.eql('child \\\"typesOfTasks\\\" fails because [\\\"typesOfTasks\\\" at position 0 fails because [\\\"0\\\" is not allowed to be empty]]');\r", "});"], "type": "text/javascript"}}], "id": "8b3c6869-fec9-4765-832b-75d6190575ac", "protocolProfileBehavior": {"disableBodyPruning": true}, "request": {"method": "POST", "header": [], "body": {"mode": "raw", "raw": "{\r\n  \"name\": \"ABC123!#\u00a4\",\r\n  \"brand\": \"{{$randomAlphaNumeric}}\",\r\n  \"model\": \"{{$randomAlphaNumeric}}\",\r\n  \"typesOfTasks\": [\"\"]\r\n}\r\n", "options": {"raw": {"language": "json"}}}, "url": {"raw": "{{baseUrl}}/robotType", "host": ["{{baseUrl}}"], "path": ["robotType"]}}, "response": [], "uid": "30686794-8b3c6869-fec9-4765-832b-75d6190575ac"}], "event": [{"listen": "prerequest", "script": {"id": "a01c21c5-ae92-42ab-bd46-85ffc1e11572", "type": "text/javascript", "exec": ["const myRandomName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomInt}}');", "const myRandomModel = pm.variables.replaceIn('{{$randomFirstName}}{{$randomInt}}');", "const myRandomBrand = pm.variables.replaceIn('{{$randomFirstName}}{{$randomInt}}');", "", "pm.collectionVariables.set(\"myRandomName\", myRandomName);", "pm.collectionVariables.set(\"myRandomModel\", myRandomModel);", "pm.collectionVariables.set(\"myRandomBrand\", myRandomBrand);"]}}, {"listen": "test", "script": {"id": "e17c5989-0de3-44ae-baca-a273a85cb3bb", "type": "text/javascript", "exec": [""]}}], "variable": [{"key": "myRandomName", "value": "A", "type": "string"}, {"key": "myRandomModel", "value": "B", "type": "string"}, {"key": "myRandomBrand", "value": "C", "type": "string"}, {"key": "baseUrl", "value": "localhost:4000/api", "type": "string"}]}