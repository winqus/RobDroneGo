image: node:18.18.0

pipelines:
  pull-requests:
    '**':
      - parallel:
          - step:
              name: Build and Test Node
              runs-on:
                - self.hosted
                - linux
              caches:
                - node
              script:
                - if [ "$BITBUCKET_PR_DESTINATION_BRANCH" != "main" ] && [ "$BITBUCKET_PR_DESTINATION_BRANCH" != "develop" ]; then echo 'Destination not main or develop branch.'; exit 0; fi
                - node -v
                - python3 --version
                - npm install
                - npm run build
                - npx jest
          - step:
              runs-on:
                - self.hosted
                - linux
              name: Code linting Node
              caches:
                - node
              script:
                - if [ "$BITBUCKET_PR_DESTINATION_BRANCH" != "main" ] && [ "$BITBUCKET_PR_DESTINATION_BRANCH" != "develop" ]; then echo 'Destination not main or develop branch.'; exit 0; fi
                - npm install
                - npm run lint:js || true
  custom:
    ssh-test:
      - step:
          name: Test SSH Connection
          runs-on:
            - self.hosted
            - linux
          script:
            - echo "Testing SSH connection to the server"
            - ssh -p $SERVER_SSH_PORT $SERVER_USERNAME@$SERVER_HOSTNAME "echo 'SSH connection successful'; ls"
    manual-trigger:
      - parallel:
          - step:
              name: Manually Triggered Build and Test Node
              runs-on:
                - self.hosted
                - linux
              script:
                - node -v
                - python3 --version
                - npm install
                - npm run build
                - npx jest
          - step:
              name: Manually Triggered Node Code linting
              runs-on:
                - self.hosted
                - linux
              script:
                - npm install
                - npm run lint:js || true
    deploy-main:
      - step:
          name: Test Node
          runs-on:
            - self.hosted
            - linux
          caches:
            - node
          script:
            - npm install
            - npx jest
      - step:
          name: Deploy to Production
          runs-on:
            - self.hosted
            - linux
          script:
            - echo "Deploying to Production Server"
            # Create .env file and copy to server
            - echo "MONGODB_URI=$MONGO_DB_URI" > .env
            - echo "JWT_SECRET=$JWT_SECRET" >> .env
            - echo "PLANNING_API_HOSTNAME=$PLANNING_API_HOSTNAME" >> .env
            - echo "PLANNING_API_PORT=$PLANNING_API_PORT" >> .env
            - echo "PLANNING_API_BASE_PATH=$PLANNING_API_BASE_PATH" >> .env
            - echo "NODE_ENV=production" >> .env
            - echo "PORT=4000" >> .env
            - scp -P $SERVER_SSH_PORT ./.env $SERVER_USERNAME@$SERVER_HOSTNAME:/home/www/node-app/production/
            # SSH into the server and execute deployment commands
            - ssh -tt -p $SERVER_SSH_PORT $SERVER_USERNAME@$SERVER_HOSTNAME << EOF
            - set -euxo pipefail;
            - cd /home/www/node-app/production/;
            - (git clone --branch $BITBUCKET_BRANCH $BITBUCKET_GIT_HTTP_ORIGIN ./ || (git pull origin $BITBUCKET_BRANCH));
            - npm install;
            - npm run build;
            - npm run restart:prod;
            - set +e;
            - exit 0
            - EOF
    deploy-develop:
      - step:
          name: Test Node
          runs-on:
            - self.hosted
            - linux
          caches:
            - node
          script:
            - npm install
            - npx jest
      - step:
          name: Deploy to Development
          runs-on:
            - self.hosted
            - linux
          script:
            - echo "Deploying to Development Server"
            # Create .env file and copy to server
            - echo "MONGODB_URI='$MONGO_DB_URI'" > .env;
            - echo "JWT_SECRET='$JWT_SECRET'" >> .env;
            - echo "PLANNING_API_HOSTNAME='$PLANNING_API_HOSTNAME'" >> .env;
            - echo "PLANNING_API_PORT=$PLANNING_API_PORT" >> .env;
            - echo "PLANNING_API_BASE_PATH='$PLANNING_API_BASE_PATH'" >> .env;
            - echo "NODE_ENV=development" >> .env;
            - echo "PORT=4001" >> .env;
            - scp -P $SERVER_SSH_PORT ./.env $SERVER_USERNAME@$SERVER_HOSTNAME:/home/www/node-app/development/
             # SSH into the server and execute deployment commands
            - ssh -tt -p $SERVER_SSH_PORT $SERVER_USERNAME@$SERVER_HOSTNAME << EOF
            - set -euxo pipefail;
            - cd /home/www/node-app/development/;
            - (git clone --branch $BITBUCKET_BRANCH $BITBUCKET_GIT_HTTP_ORIGIN ./ || (git pull origin $BITBUCKET_BRANCH));
            - npm install;
            - npm run build;
            - npm run restart:dev;
            - set +e;
            - exit 0
            - EOF